import Foundation

enum HTTPStatusCodes: Int, Codable {
    case `continue` = 100
    case switchingProtocols = 101
    case processing = 102
    case ok = 200
    case created = 201
    case accepted = 202
    case nonAuthoritativeInformation = 203
    case noContent = 204
    case resetContent = 205
    case partialContent = 206
    case multiStatus = 207
    case alreadyReported = 208
    case IMUsed = 226
    case multipleChoices = 300
    case movedPermanently = 301
    case found = 302
    case seeOther = 303
    case notModified = 304
    case useProxy = 305
    case switchProxy = 306
    case temporaryRedirect = 307
    case permenantRedirect = 308
    case badRequest = 400
    case unauthorized = 401
    case paymentRequired = 402
    case forbidden = 403
    case notFound = 404
    case methodNotAllowed = 405
    case notAcceptable = 406
    case proxyAuthenticationRequired = 407
    case requestTimeout = 408
    case conflict = 409
    case gone = 410
    case lengthRequired = 411
    case preconditionFailed = 412
    case payloadTooLarge = 413
    case URITooLong = 414
    case unsupportedMediaType = 415
    case rangeNotSatisfiable = 416
    case expectationFailed = 417
    case teapot = 418
    case misdirectedRequest = 421
    case unprocessableEntity = 422
    case locked = 423
    case failedDependency = 424
    case upgradeRequired = 426
    case preconditionRequired = 428
    case tooManyRequests = 429
    case requestHeaderFieldsTooLarge = 431
    case noResponse = 444
    case unavailableForLegalReasons = 451
    case SSLCertificateError = 495
    case SSLCertificateRequired = 496
    case HTTPRequestSentToHTTPSPort = 497
    case clientClosedRequest = 499
    case internalServerError = 500
    case notImplemented = 501
    case badGateway = 502
    case serviceUnavailable = 503
    case gatewayTimeout = 504
    case HTTPVersionNotSupported = 505
    case variantAlsoNegotiates = 506
    case insufficientStorage = 507
    case loopDetected = 508
    case notExtended = 510
    case networkAuthenticationRequired = 511

    var isSuccess: Bool {
        (200..<300).contains(self.rawValue)
    }

    var name: String {
        switch self {
        case .continue: return "continue"
        case .switchingProtocols: return "switchingProtocols"
        case .processing: return "processing"
        case .ok: return "ok"
        case .created: return "created"
        case .accepted: return "accepted"
        case .nonAuthoritativeInformation: return "nonAuthoritativeInformation"
        case .noContent: return "noContent"
        case .resetContent: return "resetContent"
        case .partialContent: return "partialContent"
        case .multiStatus: return "multiStatus"
        case .alreadyReported: return "alreadyReported"
        case .IMUsed: return "IMUsed"
        case .multipleChoices: return "multipleChoices"
        case .movedPermanently: return "movedPermanently"
        case .found: return "found"
        case .seeOther: return "seeOther"
        case .notModified: return "notModified"
        case .useProxy: return "useProxy"
        case .switchProxy: return "switchProxy"
        case .temporaryRedirect: return "temporaryRedirect"
        case .permenantRedirect: return "permenantRedirect"
        case .badRequest: return "badRequest"
        case .unauthorized: return "unauthorized"
        case .paymentRequired: return "paymentRequired"
        case .forbidden: return "forbidden"
        case .notFound: return "notFound"
        case .methodNotAllowed: return "methodNotAllowed"
        case .notAcceptable: return "notAcceptable"
        case .proxyAuthenticationRequired: return "proxyAuthenticationRequired"
        case .requestTimeout: return "requestTimeout"
        case .conflict: return "conflict"
        case .gone: return "gone"
        case .lengthRequired: return "lengthRequired"
        case .preconditionFailed: return "preconditionFailed"
        case .payloadTooLarge: return "payloadTooLarge"
        case .URITooLong: return "URITooLong"
        case .unsupportedMediaType: return "unsupportedMediaType"
        case .rangeNotSatisfiable: return "rangeNotSatisfiable"
        case .expectationFailed: return "expectationFailed"
        case .teapot: return "teapot"
        case .misdirectedRequest: return "misdirectedRequest"
        case .unprocessableEntity: return "unprocessableEntity"
        case .locked: return "locked"
        case .failedDependency: return "failedDependency"
        case .upgradeRequired: return "upgradeRequired"
        case .preconditionRequired: return "preconditionRequired"
        case .tooManyRequests: return "tooManyRequests"
        case .requestHeaderFieldsTooLarge: return "requestHeaderFieldsTooLarge"
        case .noResponse: return "noResponse"
        case .unavailableForLegalReasons: return "unavailableForLegalReasons"
        case .SSLCertificateError: return "SSLCertificateError"
        case .SSLCertificateRequired: return "SSLCertificateRequired"
        case .HTTPRequestSentToHTTPSPort: return "HTTPRequestSentToHTTPSPort"
        case .clientClosedRequest: return "clientClosedRequest"
        case .internalServerError: return "internalServerError"
        case .notImplemented: return "notImplemented"
        case .badGateway: return "badGateway"
        case .serviceUnavailable: return "serviceUnavailable"
        case .gatewayTimeout: return "gatewayTimeout"
        case .HTTPVersionNotSupported: return "HTTPVersionNotSupported"
        case .variantAlsoNegotiates: return "variantAlsoNegotiates"
        case .insufficientStorage: return "insufficientStorage"
        case .loopDetected: return "loopDetected"
        case .notExtended: return "notExtended"
        case .networkAuthenticationRequired: return "networkAuthenticationRequired"
        }
    }
}
